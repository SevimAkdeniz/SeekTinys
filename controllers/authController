const jwt = require("jsonwebtoken");
const User = require("../models/users"); // ✅ MySQL Modelini Kullan
const bcrypt = require("bcryptjs");
const { Op } = require("sequelize");

const maxAge = 60 * 60 * 24;
const createToken = (id) => {
    return jwt.sign({ id }, "gizli", { expiresIn: maxAge });
};

// Giriş Sayfasını Göster
const auth_login = (req, res) => {
    res.render("login");
};

// Kullanıcı Girişi İşlemi
const auth_login_post = async (req, res) => {
  const { email, password } = req.body;

  // Admin override
  if (email === "sevimakdeniz7@gmail.com" && password === "sev") {
    req.session.user = {
      id: 9999,
      name: "Sevim Admin",
      role: "admin"
    };
    req.session.userRole = "admin";
    return res.redirect("/admin");
  }

  try {
    const user = await User.findOne({ where: { email } });
    console.log("USER:", user); // Debug log

    // ⛔ null kontrolü
    if (!user || !user.id) {
      return res.render("login", { error_msg: "E-posta bulunamadı." });
    }

    // 🔐 Şifre kontrolü
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.render("login", { error_msg: "Şifre yanlış." });
    }

    // 🟡 Pasif kullanıcı kontrolü
    if (!user.is_active) {
      return res.render("login", { error_msg: "Hesabınız pasif." });
    }

    // ✅ Her şey doğruysa session yaz
    const safeRole = user?.role || "customer";

    req.session.user = {
      id: user.id,
      name: user.username,
      role: safeRole
    };

    req.session.userRole = safeRole;

    const token = createToken(user.id);
    res.cookie("jwt", token, { httpOnly: true, maxAge: maxAge * 1000 });

    res.redirect("/");

  } catch (err) {
    console.error("🔥 Giriş işlemi hatası:", err);
    res.status(500).render("login", { error_msg: "Sunucu hatası." });
  }
};





// Kayıt Sayfasını Göster
const auth_signup = (req, res) => {
    res.render("signup");
};



const auth_signup_post = async (req, res) => {
  try {
    const { username, email, password, role } = req.body;

    // 🔒 Eksik bilgi kontrolü
    if (!username || !email || !password || !role) {
      return res.render("signup", { error_msg: "Tüm alanları doldurmalısınız." });
    }

    // 🔍 Kullanıcı adı veya e-mail var mı kontrol et
    const existingUser = await User.findOne({
      where: {
        [Op.or]: [
          { email },
          { username }
        ]
      }
    });

    if (existingUser) {
      const isEmailTaken = existingUser.email === email;
      const isUsernameTaken = existingUser.username === username;

      let msg = isEmailTaken ? "Bu e-posta zaten kayıtlı." :
                isUsernameTaken ? "Bu kullanıcı adı zaten alınmış." :
                "Kullanıcı zaten mevcut.";

      return res.render("signup", { error_msg: msg });
    }

    // ✅ Şifreyi hashle
    const hashedPassword = await bcrypt.hash(password, 10);

    // ✅ Kullanıcı oluştur
    await User.create({
      username,
      email,
      role,
      password: hashedPassword,
      is_active: true,
      resetCodeAttempts: 0
    });

    return res.redirect("/login");

  } catch (err) {
    console.error("❌ Kayıt sırasında hata:", err);
    return res.status(500).render("signup", { error_msg: "Sunucu hatası." });
  }
};
module.exports = {
    auth_login,
    auth_signup,
    auth_signup_post,
    auth_login_post,
};
